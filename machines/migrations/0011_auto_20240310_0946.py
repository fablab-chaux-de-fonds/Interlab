# Generated by Django 3.2.25 on 2024-03-10 09:46

from django.db import migrations
from polymorphic.query import PolymorphicQuerySet

def forward_change(apps, schema_editor):
    Machine = apps.get_model('machines', 'Machine')
    Training = apps.get_model('machines', 'Training')
    LinearPriceModel = apps.get_model('machines', 'LinearPriceModel')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    price_content_type = ContentType.objects.get_for_model(LinearPriceModel)
    
    for m in Machine.objects.all():
        if m.full_price is not None and m.full_price > 0:
            model = LinearPriceModel.objects.filter(full_price=m.full_price).first()
            if model is not None:
                m.price = model
            else:
                m.price = LinearPriceModel.objects.create(full_price=m.full_price, polymorphic_ctype=price_content_type)
        m.full_price = None
        m.save()

def backward_change(apps, schema_editor):
    Machine = apps.get_model('machines', 'Machine')
    Training = apps.get_model('machines', 'Training')
    LinearPriceModel = apps.get_model('machines', 'LinearPriceModel')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    price_content_type = ContentType.objects.get_for_model(LinearPriceModel)

    for m in Machine.objects.all():
        if m.price is not None and m.price.polymorphic_ctype == price_content_type:
            price = LinearPriceModel.objects.get(pk=m.price.pk)
            m.full_price = price.full_price
            m.price = None
            m.save()
    LinearPriceModel.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('machines', '0010_auto_20240310_0852'),
    ]

    operations = [
        migrations.RunPython(forward_change, backward_change),
    ]
